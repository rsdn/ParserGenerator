using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.ComponentModel.Design;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Forms;
using System.Windows.Controls;

using EnvDTE;
using Microsoft.VisualStudio;
using Microsoft.VisualStudio.Shell;
using Microsoft.VisualStudio.Shell.Interop;

namespace Rsdn.N2.VisualStudio
{
  [ PackageRegistration(UseManagedResourcesOnly = true ) ]
  [ Guid ( "EE439415-4A80-4181-B0A8-1233B1BBBABC" ) ]
  [ ProvideMenuResource(1000s, 1)]
  [ ProvideAutoLoad ( Constants.vsContextNoSolution ) ]
  [ ProvideToolWindow ( typeof ( AstToolWindow ), Style = Microsoft.VisualStudio.Shell.VsDockStyle.Tabbed, Window = "ADB6400B-FB19-4A2B-801E-D60BDF667494" ) ]
  [ ProvideService ( typeof ( SN2PackageService ) ) ]
  [ InstalledProductRegistration ( "N2 language framework", "Framework to build our own languages", "1.0" ) ]
  public class N2Package : Package, IVsInstalledProduct
  {
    // Cache the Menu Command Service since we will use it multiple times
    private mutable menuService : OleMenuCommandService;
    
    protected override Initialize ( ) : void
    {
      base.Initialize ( );

      this.InitializeServices ( );
      
      menuService = GetService ( typeof ( IMenuCommandService ) ) :> OleMenuCommandService;
      when ( menuService != null && !this.Zombied)
      {
        // Each command is uniquely identified by a Guid/integer pair.
        def id = CommandID ( GuidsList.guidN2ToolWindowCmdSet, PkgCmdId.cmdidToolWindow );
        // Add the handler for the persisted window with selection tracking
        menuService.AddCommand ( OleMenuCommand ( EventHandler ( this.ShowPersistedWindow ), id ) );
      }
    }

    private InitializeServices ( ) : void
    {
      def container = this : IServiceContainer;
      container.AddService ( typeof ( SN2PackageService ), N2PackageService ( ), true );
    }
    
		private ShowPersistedWindow ( _ : object, _ : EventArgs ) : void
		{
			// Get the 1 (index 0) and only instance of our tool window (if it does not already exist it will get created)
			def pane = this.FindToolWindow ( typeof ( AstToolWindow ), 0, true );
			
			when (pane == null)
				throw COMException("Can not find tool window");
			
			def frame = pane.Frame :> IVsWindowFrame;
			when (frame == null)
				throw COMException("Can not get window frame");

		  // Bring the tool window to the front and give it focus
			_ = ErrorHandler.ThrowOnFailure(frame.Show());
		}
		
    #region Microsoft.VisualStudio.Shell.Interop.IVsInstalledProduct  Members

    public IdBmpSplash(pIdBmp : out uint) : int
    {
      _ = pIdBmp;
      VSConstants.S_FALSE;
    }

    public IdIcoLogoForAboutbox(pIdIco : out uint) : int
    {
      _ = pIdIco;
      VSConstants.S_FALSE;
    }

    public OfficialName(pbstrName : out string) : int
    {
      pbstrName = "nemerle 2.0";
      VSConstants.S_OK;
    }

    public ProductDetails(pbstrProductDetails : out string) : int
    {
      pbstrProductDetails = "nemerle 2.0 product details";
      VSConstants.S_OK;
    }

    public ProductID(pbstrPID : out string) : int
    {
      _ = pbstrPID;
      VSConstants.S_FALSE;
    }

    #endregion
  }
}